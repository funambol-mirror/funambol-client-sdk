/*
 * Funambol is a mobile platform developed by Funambol, Inc. 
 * Copyright (C) 2009 Funambol, Inc.
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission 
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY FUNAMBOL, FUNAMBOL DISCLAIMS THE 
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Affero General Public License 
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 * 
 * You can contact Funambol, Inc. headquarters at 643 Bair Island Road, Suite 
 * 305, Redwood City, CA 94063, USA, or at email address info@funambol.com.
 * 
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 * 
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Powered by Funambol" logo. If the display of the logo is not reasonably 
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by Funambol".
 */

package com.funambol.client.ipc.rpc;

import java.util.Vector;

/**
 * This class represents an XmlRpc message. The class can represent both remote
 * calls (<i>MethodCall</i>) and responses (<i>MethodResponse</i>).
 * Instances of this class can be generated by the @see XmlRpcParser while
 * parsing incoming data, or they can be generated by the user when it needs to
 * send requests/responses that will be formatted by the @see XmlRpcFormatter.
 */
class XmlRpcMessage {

    private boolean methodCall = false;
    private String methodName  = null;
    private Vector params      = new Vector();
    private boolean fault      = false;

    public XmlRpcMessage() {
    }

    /**
     * Specifies if this is a Method call (default is false)
     * @param value the value
     */
    public void setMethodCall(boolean value) {
        methodCall = value;
    }

    /**
     * Returns true if this message represents a method call
     */
    public boolean isMethodCall() {
        return methodCall;
    }

    /**
     * Sets the name of the method to be called. This is meaningful only if this
     * message represents a method call.
     * @param methodName the method name
     */
    public void setMethodName(String methodName) {
        this.methodName = methodName;
    }

    /**
     * Returns the name of the method this method call refers to. If this
     * message represents a response, the value returned is null.
     */
    public String getMethodName() {
        return methodName;
    }

    /**
     * Add a parameter to this message. For method calls all parameters are
     * input parameters (passed to the method), while for responses all
     * parameters are output values (returned by the method).
     * This model supports multiple return values, even though the rest of the
     * package does not support them. Therefore it is necessary that responses
     * have 0 or 1 parameter.
     *
     * @param param is the parameter to be added
     */
    public void addParam(RPCParam param) {
        params.addElement(param);
    }

    /**
     * Resets the list of parameters. @see addParam for more details.
     * @param params is the list of parameters
     */
    public void setParams(RPCParam params[]) {
        this.params.removeAllElements();
        for(int i=0;i<params.length;++i) {
            addParam(params[i]);
        }
    }

    /**
     * Get the list of parameters. @see addParam for more details.
     */
    public Vector getParams() {
        return params;
    }

    /**
     * Specifies that this response is a fault response. The package does not
     * model exception, but a method may return a failure response. A failure
     * response is expressed with a particular syntax in Xml Rpc. This method
     * turns a response into a faulty one. The method allows to specify the
     * error code and the error string.
     * @param code is the error code
     * @param string is the error string
     */
    public void setFault(int code, String string) {
        setFault(true);
        RPCParam param = new RPCParam();

        RPCParam members[] = new RPCParam[2];
        RPCParam faultCode = new RPCParam();
        faultCode.setName(XmlRpc.TAG_FAULT_CODE);
        faultCode.setIntValue(code);
        RPCParam faultReason = new RPCParam();
        faultReason.setName(XmlRpc.TAG_FAULT_STRING);
        faultReason.setStringValue(string);
        members[0] = faultCode;
        members[1] = faultReason;
        param.setStructValue(members);
        addParam(param);
    }

    /**
     * Specifies that this response is a fault response. The caller is required
     * to set a struct parameter with the faultCode and the faultString, as
     * stated by the XmlRpc specification. In general it is recommended the
     * usage of @see setFault(int, String) instead of this lower level
     * implementation.
     * @param value specifies if this response is a faulty one
     */
    public void setFault(boolean value) {
        fault = value;
    }

    /**
     * Returns true if a response represent a fault
     */
    public boolean isFault() {
        return fault;
    }
}
 

#!/bin/bash

PROG_NAME=run_unit_test
TEST_SETUP_PREFIX="setup_"
TEST_CLEANUP_PREFIX="cleanup_"

EXIT_ON_TEST_FAIL=0
VERBOSE=0

declare -a TEST_LIST

function log_debug()
{
    if [ $VERBOSE -gt 0 ]; then
        log_message "$@"
    fi
}

function check_if_defined()
{
    func_name="$1"

    if [ -z $func_name ]; then
        return 0
    fi

    hash $func_name > /dev/null 2>&1

    if [ $? -eq 0 ]; then
        return 1
    else 
        return 0
    fi
}

function call_if_defined()
{
    func_name="$1"
    shift
    func_params="$@"

    if [ -z $func_name ]; then
        return 0
    fi

    hash $func_name > /dev/null 2>&1

    if [ $? -eq 0 ]; then
        $func_name $func_params

        return $?
    fi

    return 0
}

# handler for setup_test and cleanup_test
function call_test_fixture()
{
    test_name="$1"
    test_fixture="$2"

    if [ -z $test_name -o -z $test_fixture ]; then
        log_error "can't exec test fixture: invalid test name or test fixture name"
        
        return $EXIT_FAILURE    
    fi

    test_setup="$test_setup_prefix$test_name"
    
    call_if_defined $test_fixture

    return $?
}

function setup_test()
{
    test_name="$1"
    test_setup="$TEST_SETUP_PREFIX$test_name"
    
    call_test_fixture $test_name $test_setup

    return $?
}

function cleanup_test()
{
    test_name="$1"
    test_setup="$TEST_CLEANUP_PREFIX$test_name"
    
    call_test_fixture $test_name $test_setup

    return $?
}

function run_test()
{
    test_name="$1"

    # check test integrity
    if [ -z $test_name ]; then
        log_error "can't run test: invalid test name"
        
        return $EXIT_FAILURE    
    fi

    check_if_defined $test_name

    if [ $? -eq 0 ]; then
        log_error "test \"$test_name\" is not defined" 
    
        return $EXIT_FAILURE
    fi

    # set up test
    setup_test $test_name

    if [ ! $? -eq 0 ]; then
        log_error "error setting up \"$test_name\""

        return $EXIT_FAILURE
    fi

    # run test 
    $test_name

    if [ ! $? -eq 0 ]; then
        return $EXIT_FAILURE
    fi

    # cleanup test
    cleanup_test $test_name

    if [ ! $? -eq 0 ]; then
        log_error "error in \"$test_name\" cleanup"

        return $EXIT_FAILURE
    fi

    return $EXIT_SUCCESS
}

### unit testing main routine
function run_test_loop() 
{
    tests_run=0
    tests_failed=0
    tests_num=${#TEST_LIST[@]}

    if [ ! $tests_num -gt 0 ]; then
        log_message "no test defined to run... exiting"
        
        exit $EXIT_FAILURE
    fi

    log_message "## total number of test loaded: $tests_num"

    for (( i = 0; i < $tests_num; i++ )); do
        test_name=${TEST_LIST[$i]}

        log_message "## executing test: $test_name"

        run_test $test_name

        test_ret_val=$?

        if [ $test_ret_val != 0 ]; then
            log_message "test run for \"$test_name\" failed!"
            tests_failed=$(expr $tests_failed + 1)
        fi

        tests_run=$(expr $tests_run + 1)

        if [ $test_ret_val != 0 -a $EXIT_ON_TEST_FAIL == 1 ]; then
            break
        fi
    done

    log_message "## total test run: $tests_run"
    log_message "## failed: $tests_failed"

    if [ $tests_failed -gt 0 ]; then
        return $EXIT_FAILURE
    else
        return $EXIT_SUCCESS
    fi
}

function add_test()
{
    test_source_file="$1"

    if [ -z $test_source_file ]; then
        log_error "invalid test name"

        return $EXIT_FAILURE
    fi

    # source in test file methods
    if [ ! -e $test_source_file ]; then
        log_error "can't find $test_source_file: no such file"

        return $EXIT_FAILURE
    elif [ ! -r $test_source_file ]; then
        log_error "can't read $test_source_file: premission denied"

        return $EXIT_FAILURE
    else 
        source $test_source_file

        if [ ! $? -eq 0 ]; then 
            log_error "error sourcing test file \"$test_source_file"

            return $EXIT_FAILURE
        fi
    fi

    # add test name to test list
    tests_num=${#TEST_LIST[@]}
    TEST_LIST[$tests_num]=$(basename $test_source_file)

    return $EXIT_SUCCESS    
}    

function add_tests_from_dir()
{
    tests_file_dir="$1"

    if [ -z $tests_file_dir ]; then
        log_error "directory name missing"

        return $EXIT_FAILURE
    fi

    dir_contents=$(ls $tests_file_dir)

    log_debug "reading test files from directory $tests_file_dir..."

    for file in $dir_contents; do
        test_file="$tests_file_dir/$file"
        if [ -f $test_file -a -r $test_file ]; then
            log_debug "adding test $file"

            add_test $test_file 
            
            if [ $? != 0 ]; then
                log_error "can't read test file \"$test_file\""
    
                return $EXIT_FAILURE
            fi
        fi
    done

    return $EXIT_SUCCESS    
}

function print_help()
{
cat << EOF
$PROG_NAME: run a unit test (suite)

Usage:
    $PROG_NAME [-f test_file] [-d test_files_dir] [-b -v -h]

EOF
}

function main()
{
    program_args="$@"

    if [ -z "$program_args" ]; then
        print_help

        exit $EXIT_FAILURE
    fi 

    source ut_common

    while getopts ": f:d:bvh" opt; do
        case $opt in
            f) add_test $OPTARG
                if [ $? != 0 ]; then
                    log_error "error adding \"$OPTARG\" to test list"

                    exit $EXIT_FAILURE
                fi
                ;;
            d) add_tests_from_dir $OPTARG
                if [ $? != 0 ]; then
                    log_error "error adding test files from directory \"$OPTARG\""

                    exit $EXIT_FAILURE
                fi
                ;;
 
            b) EXIT_ON_TEST_FAIL=1 ;;
            v) VERBOSE=1 ;;
            h) print_help 
               exit $EXIT_SUCCESS ;;

            ?) log_error "$PROG_NAME: unrecognized option \"$OPTARG\""
               print_help
               exit $EXIT_FAILURE ;;
        esac
    done

    run_test_loop

    exit $?
}

main $@
